
table (1)
create table customers
(customerid int primary key  ,first_name varchar(40), last_name varchar(40), email varchar(50),registraction_date date);

insert into customers(customerid,first_name,last_name,email,registraction_date)
values
(1,"join","doe","joindoe@gmail.com","2022-03-15"),
(2,"jane","smith","janesmith@gmail.com","2021-11-02");

select  * from customers;


table (2)
create table orders
(orderid int primary key, customerid int, order_date date, total_amount int);

insert into orders (orderid, customerid, order_date,total_amount)
values
(101,1,"2023-07-01",150),
(102,2,"2023-07-03",200);

select * from orders; 

table (3)
create table employee 
(employeeid int primary key, first_name varchar(40), last_name varchar(40), department varchar(50),hire_date date,
salary int);

insert into employee (employeeid, first_name, last_name, department, hire_date,salary)
values
(1,"mark","johnson","sale","2020-01-15",50000),
(2,"susan", "lee", "HR", "2021-03-20",55000);

select * from employee;


(1) INNER JOIN : Retrive all orders all orders and customer deatails where orders exist
select * 
from customers c 
inner join orders o
on c.customerid = o.customerid;


(2) LEFT JOIN: REtrive all custoners and their cooesponding orders (if any)
SELECT *
FROM customers c
LEFT JOIN orders o
ON c.customerid = o.customerid;

(3) RIGHT JOIN: Retrive all orders and their corresponding custoners(if any)
SELECT *
FROM customers c
right JOIN orders o
ON c.customerid = o.customerid;

(4) FULL OUTER JOIN: Retrive all customers and all orders, regardless of matching.
SELECT *
FROM customers c
LEFT JOIN orders o
ON c.customerid = o.customerid
union
SELECT *
FROM customers c
right JOIN orders o
ON c.customerid = o.customerid;

(5) Subquery to find customers who have placed order worth more than the average amount.
select avg(total_amount)
from orders;

(6) Subquery to find employees with salaries above the average salary
select avg(salary)
from employee ;


(7) Extract the year and month from the OrderDate
SELECT order_date,
    MONTH(order_date) AS order_month,
    YEAR(order_date) AS order_year
FROM orders;

(8) Calculate the difference in days between two dates(order date and current date)
select order_date,
datediff(curdate(),order_date)
from orders;



(9) Concatenate FristName and LastName to from a full name:
select concat(first_name, last_name)as full_name from employee;

(10) Replace part of a string (e.g. replace "john" with "jonathan"):
select replace(first_name, "join",'johnthon')as updated_name
from customers;

(11) Convert FirstName to uppercase and LastName to lowercase:
select upper(frist_name)from customers;
select lower(last_name)from customers;


(12) Trim extra space from the Email fild:
select trim(both " "from email)as trimedemail from customers;



(13) Rank order based on TotalAmount using the RANK() function:
select *,
    percent_rank() over(ORDER BY totalamount DESC) AS percentil_rank
FROM orders;


(14) Categorize employees salaries as high, medium,or low:

select min(salary)as minimum  from employee ;
select max(salary) as maximum from employee  ;
select avg(salary) as medium from employee  ;